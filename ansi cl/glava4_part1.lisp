;;---------------------------------------------------
;; make-array - позволяет создавать массивы

(setf arr (make-array '(2 3) :initial-element nil))

;; => #2A((NIL NIL NIL) (NIL NIL NIL))
;; Получается массив 2х3, состоящий из nil

;; :initial-element - это аргумент (не обязательный)
;; Если он используется, задаётся начальное значение каждого
;; элемента массива (в данном примере nil)

;;---------------------------------------------------
;; aref - позволяет получить элемент массива (отсчёт начинается с нуля)

(aref arr 0 0)

;; => NIL

;;---------------------------------------------------
;; Чтобы установить новое значение массива, необходимо использовать
;; setf вместе с aref

(setf (aref arr 0 0) 'b)

;; => B

(aref arr 0 0)

;; => B

;;---------------------------------------------------
;; Массив можно задать с помощью синтаксиса #na
;; n - количество размерностей массива

#2a((b nil nil) (nil nil nil))

(setf *print-array* t)

;; => T
;; *print-array* - глобальная переменная (если она Т, то массив будет
;; напечатан в заданном виде)

arr

;; => #2A((B NIL NIL) (NIL NIL NIL))





