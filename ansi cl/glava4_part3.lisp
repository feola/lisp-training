;;---------------------------------------------------
;; elt - позволяет получить доступ к элементу последовательности
;; любого типа

(elt '(a b c) 1)

;; => B

(elt "string" 4)

;; => #\n

;; elt рекомендуется использовать только тогда, когда тип последовательности
;; заранее не известен

;;---------------------------------------------------
;; Новое определение функции mirror? (рассматривалась ранее) для векторов
;; Проверяет, является ли последовательность палиндромом

(defun mirror? (s)
  (let ((len (length s)))
    (and (evenp len)
         (do ((forward 0 (+ forward 1))
              (back (- len 1) (- back 1)))
             ((or (> forward back)
                  (not (eql (elt s forward)
                            (elt s back))))
              (> forward back))))))

;; => MIRROR?

(mirror? "abccba")

;; => T

(mirror? #(1 2 2 1))

;; => T

(mirror? #(1 2 3 4))

;; => NIL

;;---------------------------------------------------
;; Аргументы по ключу для функций, работающих с последовательностями:

;; :key - функция, применяемая к каждому аргументу (по умолчанию identity)
;; :test - предикат для сравнения (по умолчанию eql)
;; :from-end - если Т, работать с конци (по умолчанию nil)
;; :start - индекс элемента, с которого начинается выполнение (по умолчанию 0)
;; :end - индекс элемента, на котором следует остановиться (по умолчанию nil)

;;---------------------------------------------------
;; position - возвращает положение определённого элемента в последовательности
;; или nil в случае его отсутствия

(position #\a "fantasia")

;; => 1

(position #\a "fantasia" :start 3 :end 5)

;; => 4

(position #\a "fantasia" :from-end t)

;; => 7

(position 'a '((c d) (a b)) :key #'car)

;; => 1

(position '(a b) '((a b) (c d)))

;; => NIL

(position '(a b) '((a b) (c d)) :test #'equal)

;; => 0

(position 3 '(1 0 7 5) :test #'<)

;; => 2

;;---------------------------------------------------
;; subseq и position позволяют разделить последовательность на части

(defun second-word (str)
  (let ((p1 (+ (position #\  str) 1)))
    (subseq str p1 (position #\  str :start p1))))

;; => SECOND-WORD

(second-word "Form follows function.")

;; => "follows"

;;---------------------------------------------------
;; position-if - выполняет поиск элементов, удовлетворяющих заданному предикату

(position-if #'oddp '(2 3 4 5))

;; => 1

;;---------------------------------------------------
;; find - позволяет найти элемент в последовательности

(find #\a "cat")

;; => #\a

(find-if #'characterp "ham")

;; => #\h

;;---------------------------------------------------
;; remove-duplicates - удаляет все повторяющиеся элементы последовательности,
;; кроме последнего

(remove-duplicates "abracadabra")

;; => "cdbra"

;;---------------------------------------------------
;; reduce - сводит последовательность в одно значение

(reduce #'intersection '((b r a d 's) (b a d) (c a t)))

;; => (A)













