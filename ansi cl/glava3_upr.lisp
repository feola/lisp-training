;;---------------------------------------------------
;; УПРАЖНЕНИЯ
;;---------------------------------------------------

;;---------------------------------------------------
;; 1. Представьте следующие списки в виде ячеек

(a b (c d))

;; |---|---|   |---|---|   |---|---|
;; | a |   | > | b |   | > |   |nil|
;; |---|---|   |---|---|   |---|---|
;;                           |
;;                           |
;;                         |---|---|   |---|---|
;;                         | c |   | > | d |nil|
;;                         |---|---|   |---|---|

(a (b (c (d))))

;; |---|---|   |---|---|
;; | a |   | > |   |nil|
;; |---|---|   |---|---|
;;               |
;;               |
;;             |---|---|   |---|---|
;;             | b |   | > |   |nil|
;;             |---|---|   |---|---|
;;                           |
;;                           |
;;                         |---|---|   |---|---|
;;                         | c |   | > |   |nil|
;;                         |---|---|   |---|---|
;;                                       |
;;                                       |
;;                                     |---|---|
;;                                     | d |nil|
;;                                     |---|---|

(((a b) c) d)

;; |---|---|   |---|---|
;; |   |   | > | d |nil|
;; |---|---|   |---|---|
;;   |
;;   |
;; |---|---|   |---|---|
;; |   |   | > | c |nil|
;; |---|---|   |---|---|
;;   |
;;   |
;; |---|---|   |---|---|
;; | a |   | > | b |nil|
;; |---|---|   |---|---|

(a (b . c) . d)

;; |---|---|---|
;; | a |   | d |
;; |---|---|---|
;;       |
;;       |
;;     |---|---|
;;     | b | c |
;;     |---|---|

;;---------------------------------------------------
;; 2. Напишите свой вариант функции union, который сохраняет порядок следования
;; элементов согласно исходным спискам

(defun my-union (a b)
  (if (null b)
      a
      (my-union (reverse (adjoin (car b) (reverse a)))
                (cdr b))))

(my-union '(a f c) '(b c d))

;; => (A F C B D)

(my-union '(a b c) '(d c e a f))

;; => (A B C D E F)

(my-union '(3 4 5) '(1 2 3 4 6))

;; => (3 4 5 1 2 6)

;;---------------------------------------------------
;; 3. Напишите функцию, определяющую количество повторений (с точки зрения eql)
;; каждого элемента в заданном списке и сортирующую их по убыванию встречаемости

;; Пока не получается

;;---------------------------------------------------
;; 4. Почему (member '(a) '((a) (b))) возвращает nil?

(member '(a) '((a) (b)))

;; => NIL

;; Потому что с точки зрения eql (a) и (a) не равны, они соответствуют
;; в памяти лиспа разным объектам

(eql '(a) '(a))

;; => NIL

;; Чтобы выполнить сравнение, необходимо добавить ключ

(member '(a) '((a) (b)) :test #'equal)

;; => ((A) (B))

;;---------------------------------------------------
