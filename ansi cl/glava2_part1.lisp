;;---------------------------------------------------
;; quote (') - возвращает текстовую запись аргумента

(quote (+ 3 5))

;; CL-USER> (quote (+ 3 5))
;; (+ 3 5)

;; CL-USER> '(- 4 2)
;; (- 4 2)

;;---------------------------------------------------
;; list - позволяет построить список

(list "Белоснежка и" (- 9 2) 'гномов)

;; CL-USER> (list "Белоснежка и" (- 9 2) 'гномов)
;; ("Белоснежка и" 7 ГНОМОВ)

;; В этом примере список составляется из трёх видов
;; типов данных - строки, списка и символа

(list 'a 'b)

;; CL-USER> (list 'a 'b)
;; (A B)

;;---------------------------------------------------
;; nil или () - пустой список

nil
()

;; CL-USER> nil
;; NIL

;; CL-USER> ()
;; NIL

;;---------------------------------------------------
;; cons - позволяет построить список; в том случае, если
;; 2-ой её аргумент - список, она возвращает новый список,
;; с первым аргументом, добавленным в её начало

(cons 'a '(b c d))

;; CL-USER> (cons 'a '(b c d))
;; (A B C D)

(cons 'a (cons 'b nil))

;; CL-USER> (cons 'a (cons 'b nil))
;; (A B)

;; ?ВОПРОС? - у cons может быть только 2 аргумента?

;;---------------------------------------------------
;; car - выводит "голову" списка

(car '(a b c))

;; CL-USER> (car '(a b c))
;; A

;;---------------------------------------------------
;; cdr - выводит "хвост" списка

(cdr '(a b c))

;; (cdr '(a b c))
;; (B C)

;;---------------------------------------------------
;; listp - возвращает истину, если её аргумент - список

(listp '(a b c))

;; CL-USER> (listp '(a b c))
;; T

(listp 27)

;; CL-USER> (listp 27)
;; NIL

(listp "olesya")

;; CL-USER> (listp "olesya")
;; NIL

;;---------------------------------------------------
;; null - возвращает истину, если её аргумент - пустой список

(null nil)

;; CL-USER> (null nil)
;; T

(null 'd)

;; CL-USER> (null 'd)
;; NIL

;;---------------------------------------------------
;; not - возвращает истину, если её аргумент ложен

(not nil)

;; CL-USER> (not nil)
;; T

(not (= (+ 1 2) (- 8 5)))

;; CL-USER> (not (= (+ 1 2) (- 8 5)))
;; NIL

;;---------------------------------------------------
;; if - условный оператор, принимающий три аргумента -
;; test, then и else (последний может отсутствовать и
;; тода автоматически принимается за nil)

(if (listp '(a b c))
    (+ 1 2)
    (+ 5 6))

;; => 3

(if (listp 27)
    (+ 1 2)
    (+ 5 6))

;; => 11

(if (= (+ 5 4) 7)
    (car '(x y z))
    "равенство неверно")

;; => "равенство неверно"

(if (= (+ 5 2) 7)
    (car '(x y z))
    "равенство неверно")

;; => X

;;---------------------------------------------------
;; and - возвращает значение последнего арумента, если
;; все аргументы истинны

(and t (+ 1 2))

;; => 3

(and (car '(2 3))
     (listp '(1 5))
     (- 8 4))

;; => 4

;;---------------------------------------------------
;; or - вычисляет арументы до тех пор, пока не встретится
;; истина, и возвращает полученное значение

(or (not (null nil))
     (+ 3 5)
     (cdr '(3 4 5))
     (= 3 6)
     (= 2 2))

;; => 8






